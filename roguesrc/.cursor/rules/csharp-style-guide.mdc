---
description: 
globs: 
alwaysApply: false
---
When writing C# code:

1. Prefer early returns over nested if statements
2. Return as soon as possible when a condition is met
3. Use guard clauses at the start of methods
4. Avoid deep nesting of if statements
5. Use 'var' when the type is easily inferrable from the right-hand side
6. Boolean variables and properties should be phrased as questions

Example of good practice:
```csharp
public void ProcessItem(Item item)
{
    if (item == null)
        return;
        
    if (!item.IsValid)
        return;
        
    // Main logic here
    var result = ProcessValidItem(item);
    var processedData = TransformData(result);
    return processedData;
}
```

Instead of:
```csharp
public void ProcessItem(Item item)
{
    if (item != null)
    {
        if (item.IsValid)
        {
            // Main logic here
            ProcessedItem result = ProcessValidItem(item);
            TransformedData processedData = TransformData(result);
            return processedData;
        }
    }
}
```

This rule applies to:
- Methods
- Properties
- Indexers
- Operators
- Any code block that can return early

Use 'var' when:
- The type is obvious from the right-hand side (e.g., `var list = new List<string>()`)
- The type is clear from the method name (e.g., `var result = GetUserById(id)`)
- The type is a complex generic (e.g., `var dictionary = new Dictionary<string, List<int>>()`)

Do not use 'var' when:
- The type is not immediately clear
- The type is a primitive (e.g., `int count = 0`)
- The type is important for readability
- The type is part of a public API 

Boolean naming examples:
```csharp
// Good
bool isEnabled = true;
bool hasPermission = false;
bool canExecute = true;
bool shouldProcess = false;

// Bad
bool enabled = true;
bool permission = false;
bool execute = true;
bool process = false;
```