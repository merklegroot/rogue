---
description: 
globs: 
alwaysApply: false
---
# C# Style Guide

alwaysApply: true
globs: ["**/*.cs"]

This style guide defines the coding standards for C# development in this project.

## General Principles

- Write code that is easy to read and understand
- Favor simplicity over cleverness
- Use meaningful names that clearly express intent
- Keep methods small and focused on a single responsibility
- Prefer early returns and guard clauses over nested conditions
- Avoid deep nesting of control structures
- Types that do work (like presenters, services, etc.) should have interfaces and be used through their interfaces
  - This promotes loose coupling and testability
  - Example: `IPanelPresenter` instead of directly using `PanelPresenter`

## Naming Conventions

- Use `PascalCase` for:
  - Class names
  - Method names
  - Public properties
  - Public fields
  - Interface names (prefixed with 'I')
  - Enum types and values
  - Constants

- Use `camelCase` for:
  - Local variables
  - Private fields
  - Method parameters
  - Private properties

- Use `_camelCase` for private fields (prefix with underscore)

- Boolean variables should start with:
  - `is` (e.g., `isEnabled`)
  - `has` (e.g., `hasPermission`)
  - `should` (e.g., `shouldUpdate`)
  - `can` (e.g., `canExecute`)

- Variables representing total counts should start with `total` (e.g., `totalItems`, `totalLines`)

## Control Flow

- Prefer early returns over nested if statements
- Use guard clauses to handle edge cases at the start of methods
- Avoid `else` statements - they often indicate a missed opportunity for early returns
- Use `if` statements judiciously - consider alternatives like:
  - Pattern matching
  - Null-coalescing operators
  - Conditional expressions
- Use `switch` statements sparingly - prefer pattern matching or switch expressions
- Switch expressions are preferred over switch statements when possible
- Ternary operators are acceptable for simple conditions

## Comments and Documentation

- Keep using statements minimal - only include what's actually used
- Use comments sparingly - code should be self-documenting
- When comments are needed for clarity:
  - Place them above the code they explain
  - Avoid inline comments (comments to the right of code)
  - Focus on explaining "why" rather than "what"
- XML documentation comments are optional but encouraged for public APIs

## Code Organization

- Group related code together
- Keep methods small and focused
- Extract complex logic into well-named methods
- Use constants for magic numbers and strings
- Prefer composition over inheritance
- Keep classes focused on a single responsibility

## Formatting

- Use 4 spaces for indentation
- Use braces for all control structures, even single-line ones
- Place opening braces on the same line as the declaration
- Use a single space after keywords
- Use a single space before and after operators
- Use blank lines to separate logical sections of code
- Keep lines under 120 characters when possible

## Error Handling

- Use exceptions for exceptional circumstances
- Prefer specific exceptions over general ones
- Include meaningful error messages
- Handle exceptions at the appropriate level
- Clean up resources in finally blocks or using statements

## Performance

- Avoid premature optimization
- Profile before optimizing
- Use appropriate data structures
- Consider memory allocation patterns
- Be mindful of LINQ performance implications

Example of good practice:
```csharp
public void ProcessItem(Item item)
{
    if (item == null)
        return;
        
    if (!item.IsValid)
        return;
        
    // Main logic here
    var result = ProcessValidItem(item);
    var processedData = TransformData(result);
    return processedData;
}

// Good total count examples
int totalItems = items.Count;
int totalEnemies = enemyList.Count;
int totalHealth = CalculateTotalHealth();

// Bad total count examples
int itemsCount = items.Count;
int enemyCount = enemyList.Count;
int healthTotal = CalculateTotalHealth();
```

Instead of:
```csharp
public void ProcessItem(Item item)
{
    if (item != null)
    {
        if (item.IsValid)
        {
            // Main logic here
            ProcessedItem result = ProcessValidItem(item);
            TransformedData processedData = TransformData(result);
            return processedData;
        }
    }
}
```

This rule applies to:
- Methods
- Properties
- Indexers
- Operators
- Any code block that can return early
- Variables representing counts or totals

Use 'var' when:
- The type is obvious from the right-hand side (e.g., `var list = new List<string>()`)
- The type is clear from the method name (e.g., `var result = GetUserById(id)`)
- The type is a complex generic (e.g., `var dictionary = new Dictionary<string, List<int>>()`)

Do not use 'var' when:
- The type is not immediately clear
- The type is a primitive (e.g., `int count = 0`)
- The type is important for readability
- The type is part of a public API 

Boolean naming examples:
```csharp
// Good
bool isEnabled = true;
bool hasPermission = false;
bool canExecute = true;
bool shouldProcess = false;

// Bad
bool enabled = true;
bool permission = false;
bool execute = true;
bool process = false;
```